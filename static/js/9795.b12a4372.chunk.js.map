{"version":3,"file":"static/js/9795.b12a4372.chunk.js","mappings":"mJAEA,MA8DA,EA9DcA,KAiCNC,EAAAA,EAAAA,KAAA,OAAAC,UACIC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASF,SAAA,EACnBD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,YAAWF,SAAC,UAC1BC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,+BACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,+SACiED,EAAAA,EAAAA,KAAA,SAAM,udAC2BA,EAAAA,EAAAA,KAAA,aAErGA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,iBAAO,uQAEXC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,QAAAC,SA7CX,2gCA8Ca,oMAC2DD,EAAAA,EAAAA,KAAA,SAAK,8GAC1BA,EAAAA,EAAAA,KAAA,SAAK,+KACUA,EAAAA,EAAAA,KAAA,SAAK,8KAChBA,EAAAA,EAAAA,KAAA,aAGpDA,EAAAA,EAAAA,KAAA,KAAAC,SAAG,0N","sources":["til/Day27.tsx"],"sourcesContent":["import React,{JSX} from \"react\";\n\nconst Day27 = ():JSX.Element=>{\n    const code = `\nfunction findAbbreviation(strA, strB) {\n  const m = strA.length;\n  const n = strB.length;\n\n  // DP 테이블: dp[i][j]는 strA의 i번째까지, strB의 j번째까지 비교했을 때 가능한지\n  const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(false));\n  dp[0][0] = true;\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j <= n; j++) {\n      if (!dp[i][j]) continue;\n\n      const aChar = strA[i];\n      const upperA = aChar.toUpperCase();\n\n      // 1. 소문자면 삭제 가능 (strB의 j를 건너뛴다)\n      if (aChar !== upperA) {\n        dp[i + 1][j] = true;\n      }\n\n      // 2. 현재 문자가 strB의 j번째 문자와 대소문자 관계 없이 같으면 매칭\n      if (j < n && upperA === strB[j]) {\n        dp[i + 1][j + 1] = true;\n      }\n    }\n  }\n\n  return dp[m][n];\n}\n  `;\n    return(\n        <div>\n            <dl className=\"dayWrap\">\n                <dt className=\"daybutton\">4/11</dt>\n                <dd className=\"daycontent\">\n                    <h3>부족한 점</h3>\n                    <p>\n                        코딩 알고리즘을 구현 관련한 능력이 부족, 알고리즘 레퍼런스 코드를 이해하는 것도 집중이 않되어서 어려움을 느낌. <br />\n                        해결방안: 짧은 알고리즘을 가진 함수부터 구간마다 주석설명하는 습관을 들이며, 구현이 끝나면 전체적인 코드를 구두로 설명하는 연습을 현재 강의에서 하고있는 알고리즘 단게까지 <br/>\n                    </p>\n                    <h4>예시</h4>\n                    strA는 현재 문자이며 소문자에서 대문자변경이나 소문자 제거 선택지만 있다 strB는 strA로 부터 변경될 문자 \n                    <p>\n                        <pre>\n                            <code>{code}</code>\n                        </pre>\n                                dp[i][j]는 strA의 i번째 까지와 strB의 j번째까지 비교했을 때 변환이 가능한지를 의미. <br/>\n                                - dp[0][0]은  빈 문자열 간 매칭이므로 true로 시작 <br/>\n                                - strA의 문자를 순차적으로  살펴보며 다음 상태로의 전의(transition)을 정의 <br/>\n                                - 소문자 삭제, 대문자 변환 비교 가능, 대문자는 그대로 비교만 가능 <br/>\n                    </p>\n                    \n                    <p>chainlink\n                        js로 알고리즘 구현이 익숙하고 자연스러워 지면 솔리디티의 습득시간이 단축\n                    </p>\n                </dd>\n            </dl>\n        </div>\n    )\n}\nexport default Day27;"],"names":["Day27","_jsx","children","_jsxs","className"],"sourceRoot":""}