{"version":3,"file":"static/js/638.0fc85348.chunk.js","mappings":"+IAEA,MAwDA,EAxDcA,KAENC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4CACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kNAOHD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0IAGJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kHAGJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yJAGJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kLAIRC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wDACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,sWACqFC,EAAAA,EAAAA,KAAA,SAAK,2PAG7FA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oZAIHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,sVAC8FC,EAAAA,EAAAA,KAAA,SAAK,4EAChBA,EAAAA,EAAAA,KAAA,SAAK,kNAG3FA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,oHACuBC,EAAAA,EAAAA,KAAA,SAAK,6GACQA,EAAAA,EAAAA,KAAA,SAAK,qFACnBA,EAAAA,EAAAA,KAAA,SAAK,oJAG9BA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yH","sources":["til/Day13.tsx"],"sourcesContent":["import React,{JSX} from \"react\";\n\nconst Day13 = ():JSX.Element=>{\n    return(\n        <div>\n            <h4>변수 선언 방식</h4>\n            <p>\n                (데이터타입)(가시성)(변수명)=(초기값);\n                uint public myNum = 10;\n                string private name = 'solidity'\n                address internal owner;\n                bool public isActive = true;\n            </p>\n            <ul>\n                <li><h3>Visibility 가시성</h3></li>\n                <li>\n                    public:getter함수가 생성되는 내부,외부접근 가능한 데이터\n                </li>\n                <li>\n                    private:선언된 컨트랙트 내부에서만 접근 가능\n                </li>\n                <li>\n                    internal:선언된 컨트랙트, 그 상속받은 컨트랙트에서 접근가능\n                </li>\n                <li>\n                    external:외부(컨트랙트, 계정)만 접근가능(번수는 사용불가 함수만 적용)\n                </li>\n            </ul>\n            <h3>상태변수, 로컬변수</h3>\n            <p>\n                상태변수: 블록체인 저장소에 저장(storage)/ 영구적인 저장(트랜잭션 후에도 유지)/가스비용 발생(쓰기,읽기)/컨트랙트 내부 최상단쓰면 상태변수 <br/>\n                로컬변수: Memory or Stack에 저장/함수 실행후 소멸/가스비용적음(일시적사용)/함수 내부에 쓰면 로컬변수\n            </p>\n            <h3>constatnt, immutable</h3>\n            <p>\n                상수:배포시점에 고정된값으로 수정불가능, 읽기연산에만 사용되므로 가스비용작다\n                불변:배포시점에서만 설정가능,이후에는 변경불가능 보안성이 향상됨\n            </p>\n            <h3>function</h3>\n            <p>\n                외부호출이나 내부로직, 상태변수에 접근하거나 외부에서데이터를 가져오는데 사용된다, visibility(가시성) or state mutability(상태변경자)설정가능 <br/>\n                function addNum(uint a,uint b) public pure returns (uint) &#123;return a+b;&#125; <br/>\n                함수키워드&#124;함수이름&#124;(인자타입 인자이름)&#124;가시성지정&#124;상태 변경자&#124;(반환될타입)\n            </p>\n            <h3>state Mutability</h3>\n            <p>\n                함수가 스마트컨트랙트에 주는 영향을 정의<br/>\n                view: 컨트랙트의 상태변수 읽기만 허용 (gas fee X)<br/>\n                pure: 상태변수 읽기,쓰기 모두금지<br/>\n                payable: ETH받을수 있는 함수(특정한 금액을 받을 수 있는 함수)\n            </p>\n            <p>\n                returns (반환타입)을 지정한다: (string memory, uint) 튜플 형태\n            </p>\n        </div>\n    )\n}\n\nexport default Day13;"],"names":["Day13","_jsxs","children","_jsx"],"sourceRoot":""}