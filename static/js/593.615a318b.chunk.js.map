{"version":3,"file":"static/js/593.615a318b.chunk.js","mappings":"+IAEA,MAmEA,EAnEYA,KAEJC,EAAAA,EAAAA,KAAA,OAAAC,UACIC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASF,SAAA,EACnBD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,YAAWF,SAAC,gCAC1BC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,8BACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,0IAC8BD,EAAAA,EAAAA,KAAA,SAAK,oMAGtCE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,iBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,8CAC2CD,EAAAA,EAAAA,KAAA,SAAK,qLACVA,EAAAA,EAAAA,KAAA,SAAK,gQACeA,EAAAA,EAAAA,KAAA,SAAK,2MAItEE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,gBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,kJAC+DD,EAAAA,EAAAA,KAAA,SAAK,qKAC6BA,EAAAA,EAAAA,KAAA,SAAK,8HAC5CA,EAAAA,EAAAA,KAAA,SAAK,+HAKtEE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,aACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,4HACyCD,EAAAA,EAAAA,KAAA,SAAK,8CACIA,EAAAA,EAAAA,KAAA,SAAK,0FACbA,EAAAA,EAAAA,KAAA,SAAK,8GACKA,EAAAA,EAAAA,KAAA,SAAK,mSAIhEE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,YACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,oRAC0DD,EAAAA,EAAAA,KAAA,SAAK,wDACAA,EAAAA,EAAAA,KAAA,SAAK,4JACnCA,EAAAA,EAAAA,KAAA,SAAK,4CAI7CE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,gBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,6CAC0CD,EAAAA,EAAAA,KAAA,SAAK,6MACAA,EAAAA,EAAAA,KAAA,SAAK,uNACKA,EAAAA,EAAAA,KAAA,SAAK,qGACdA,EAAAA,EAAAA,KAAA,SAAK,6J","sources":["til/Day14.tsx"],"sourcesContent":["import React,{JSX} from \"react\";\n\nconst Day14=():JSX.Element=>{\n    return(\n        <div>\n            <dl className=\"dayWrap\">\n                <dt className=\"daybutton\">day36 solidity문법</dt>\n                <dd className=\"daycontent\">\n                    <h3>참조타입</h3>\n                    <p>\n                        참조타입: 데이터를 참조하여 저장, 가변성을 가진다 <br/>\n                        배열,구조체,매핑,함수,모듈,라이브러리,스토리지,메모리,컨트랙트가 있다\n                    </p>\n                    <ul>\n                        <li>\n                            <h3>string type</h3>\n                            <p>\n                                string public greeting = \"Hello, World!\"; <br/>\n                                주로 이름,이메일,토큰네임등 사람이 식별해야 될 문자에 사용이된다.<br/>\n                                str자체는 조작기능이 제한있고,가스 효율이 않좋아서 bytes로 대체하여 사용하거나 혼합하여 사용한다<br/>\n                                str == str2 직접 비교연산은 지원이 않되며, keccak256를 이용하여 변환후에 비교를 한다.\n                            </p>\n                        </li>\n                        <li>\n                            <h3>Array type</h3>\n                            <p>\n                                배열은 동적크기와 고정크기로 나뉜다: uint[] dynamicArray; uint[5] fixedArray; <br/>\n                                배열은 push,pop,shift,unshift,delete,splice,concat,join,reverse,sort,filter,map,reduce등의 메소드를 지원한다 <br/>\n                                uint[] public nums; 가변배열, uint[5] public nums; 최대요소5개고정배열<br/>\n                                배열관련 내장함수는 고정크기배열 사용불가\n\n                            </p>\n                        </li>\n                        <li>\n                            <h3>Mapping</h3>\n                            <p>\n                                key-value를 저장하는 자료구조, key값으로 value를 찾는다 <br/>\n                                mapping(address &#61;&gt; uint) public balances; <br/>\n                                balances[msg.sender] = 100;  특정 주소의 값을 설정<br/>\n                                uint balance = balances[msg.sender]; 특정 주소의 값을 가져온다<br/>\n                                mapping은 storage에 저장되며 memory에 저장할수 없다/ 0이나 false값 반환이 기본이어서 존재여부 확인시 별도 플래그변수 필요\n                            </p>\n                        </li>\n                        <li>\n                            <h3>Struct</h3>\n                            <p>\n                                사용자가 정의한 데이터 타입으로 묶어 저장하는 자료구조로 복잡한 데이터를 효율적으로 관리할 수 있다. <br/>\n                                struct user&#123;string name; uint age; address wallet;&#125; <br/>\n                                여려 구조체를 관리하기위해 구조체 배열을 선언 가능하다. <br/>\n                                struct User&#123;string name; uint age&#125;\n                            </p>\n                        </li>\n                        <li>\n                            <h3>bytes type</h3>\n                            <p>\n                                bytes public greeting = \"Hello, World!\"; <br/>\n                                bytes는 와 같이 동작하지만, 길이가 고정되어있어서 더 효율적으로 사용가능하다 <br/>\n                                bytes는 문자열을 저장할때 사용하며, 문자열을 비교할때는 keccak256를 이용하여 비교한다. <br/>\n                                bytes는 bytes1~bytes32까지 있으며, bytes는 bytes1과 같다 <br/>\n                                다양한 연산을 지원하며, 문자열을 저장할때 사용한다\n                            </p>\n                        </li>\n                    </ul>\n\n                </dd>\n            </dl>\n        </div>\n    )\n}\nexport default Day14;"],"names":["Day14","_jsx","children","_jsxs","className"],"sourceRoot":""}