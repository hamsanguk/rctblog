{"version":3,"file":"static/js/5962.882198e8.chunk.js","mappings":"mJAEA,MAiDA,EAjDcA,KAENC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SAAC,UAC1BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8BACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,kHAC8CC,EAAAA,EAAAA,KAAA,SAAK,gKACnBA,EAAAA,EAAAA,KAAA,SAAK,kMAGxCA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,yHAC0DC,EAAAA,EAAAA,KAAA,SAAK,iMAClBA,EAAAA,EAAAA,KAAA,SAAK,0MACNA,EAAAA,EAAAA,KAAA,SAAK,oHAGpDA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,6OACiDC,EAAAA,EAAAA,KAAA,SAAK,2HACxBA,EAAAA,EAAAA,KAAA,SAAK,2HAGtCA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,wNACqDC,EAAAA,EAAAA,KAAA,SAAK,gGACpBA,EAAAA,EAAAA,KAAA,SAAK,iLACMA,EAAAA,EAAAA,KAAA,SAAK,kFAC9BA,EAAAA,EAAAA,KAAA,SAAK,2GAE5BA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kKAA0C,+FAE9CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mGAAwB,uFAGhCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sCACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2PAGHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8CACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,gHACwBC,EAAAA,EAAAA,KAAA,SAAK,kO","sources":["til/Day39.tsx"],"sourcesContent":["import React from \"react\";\n\nconst Day39 = ()=>{\n    return (\n        <dl className=\"dayWrap\">\n            <dt className=\"daybutton\">5/27</dt>\n            <dd className=\"daycontent\">\n                <h3>서브쿼리</h3>\n                <p>\n                    구조: SELECT \"컬럼명\" FROM (서브쿼리) AS \"별칭\" WHERE 조건<br/>\n                    메인쿼리를 도와 중간결과를 만들거나 필터링 보조하는 역할<br/>\n                    사용위치: select[특정 컬럼 계산]/where[조건으로 사용 가능]/from[임시 table로 사용 가능]\n                </p>\n                <h3>create view</h3>\n                <p>\n                    create view \"뷰 이름\" as select \"컬럼이름\" from \"테이블\" where \"조건\"<br/>\n                    실제 데이터 저장이 아닌 select의 결과를 테이블처럼 보여주는 가상의 데이터<br/>\n                    뷰 특징:실제 데이터 저장이 아니라서 가벼운 성능/ 복잡한 쿼리를 재사용 가능<br/>\n                    단점:뷰를 갱신하는 것은 일부 제한이 있다.\n                </p>\n                <h3>Transaction</h3>\n                <p>\n                    데이터베이스에서 여러 작업을 하나의 단위로 묶어서, 모두 성공이나 실패시 취소되는 결과<br/>\n                    commit:트랜잭션의 모든 변경사항을 확정하고 저장<br/>\n                    rollback:트랜잭션 중 발생한 변경사항을 모두 취소\n                </p>\n                <h3>Index</h3>\n                <p>\n                    db table에서 필요한 데이터를 빠르게 찾기 위한 목차/ 인덱스를 사용 않하면 풀스캔 진행<br/>\n                    create index \"인덱스명\" on \"테이블명\" (\"컬럼명\")<br/>\n                    [index가 필요한 경우] where로 특정 값을 자주 검색할때:빠른 조건 검색 가능<br/>\n                    join에 사용하는 컬럼:join성능 향상<br/>\n                    order by || group by에 사용되는 컬럼: 정렬성능 향상\n                    <h4> 만들어진 index조회: 기준테이블에서 존재하는 인덱스 전체 조회</h4>\n                    select indexname,indexdef from pg_indexes where tablename ='기준테이블'\n                    <h4>전체 테이블에 존재하는 인덱스 조회</h4>\n                    select tablename,indexname,indexdef from pg_indexes where schemaname = 'public';\n                </p>\n                <h3>정규화(Nomalization)</h3>\n                <p>\n                    테이블을 나눠서 필요한 데이터만을 저장하여 중복을 줄인다,update시 구조가 명확하여 관리가 쉽다\n                </p>\n                <h3>비정규화(Denomalization)</h3>\n                <p>\n                    속도나 편의성을 위하여 중복을 허용한다. <br/>\n                    성능 최적화:join이 많으면 느려진다/조회속도 향상:테이블 병합 없이 한 번에 읽게한다.\n                </p>\n            </dd>\n        </dl>\n    )\n}\nexport default Day39;"],"names":["Day39","_jsxs","className","children","_jsx"],"sourceRoot":""}