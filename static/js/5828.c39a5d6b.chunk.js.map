{"version":3,"file":"static/js/5828.c39a5d6b.chunk.js","mappings":"mJAEA,MAkEA,EAlEYA,KAEJC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SAAC,SAC1BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uRACwDC,EAAAA,EAAAA,KAAA,SAAM,0PACLA,EAAAA,EAAAA,KAAA,UACxDH,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2LACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uJACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oLAERF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACJF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,0JACwCC,EAAAA,EAAAA,KAAA,SAAM,2GACvBA,EAAAA,EAAAA,KAAA,SAAM,2IAGjCH,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,sKACqCC,EAAAA,EAAAA,KAAA,SAAM,2JACZA,EAAAA,EAAAA,KAAA,SAAM,+PAI7CH,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iDACJF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,wOACgDC,EAAAA,EAAAA,KAAA,SAAM,mJAG1DH,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,kMACwCC,EAAAA,EAAAA,KAAA,SAAM,kKACbA,EAAAA,EAAAA,KAAA,SAAM,0EAI/CH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,mJACuCC,EAAAA,EAAAA,KAAA,SAAM,+NACAA,EAAAA,EAAAA,KAAA,SAAM,wNAGlDA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UAAU,ogBAGdC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gDAAuB,6sCAK3B,qRAC8EC,EAAAA,EAAAA,KAAA,SAAM,0WACDA,EAAAA,EAAAA,KAAA,SAAM,uPAC1BA,EAAAA,EAAAA,KAAA,SAAM,yNAChBA,EAAAA,EAAAA,KAAA,SAAM,0SAC8BA,EAAAA,EAAAA,KAAA,SAAM,uH","sources":["til/Day33.tsx"],"sourcesContent":["import React,{JSX} from \"react\";\n\nconst Day33=()=>{\n    return(\n        <dl className=\"daywrap\">\n            <dt className=\"daybutton\">5/7</dt>\n            <dd className=\"daycontent\">\n                <h3>Oracle</h3>\n                <p>\n                    블록체인,스마트컨트랙트는 외부정보를 들여올 수 없어서 시세정보나 날씨,게임의 랜덤값이 필요한 경우는<br />\n                    외부의 데이터를 읽어와서, 컨트랙트에 전달해주는 중개시스템, 데이터 브릿지 역할의 oracle이 필요<br />\n                    <ul>\n                        <li>oracle 역할</li>\n                        <li>데이터 공급:외부 api,서버,센서 등에서 데이터를 가져와 블록체인에 전달</li>\n                        <li>트리거 제공:컨트랙트 실행조건 충족하는 외부 정보 제공</li>\n                        <li>자동화 지원:실제 발생한 일을 기반으로 계약을 자동으로 실행 가능</li>\n                    </ul>\n                    <ul>  \n                        <li>oracle 전달방식</li>\n                        <li>\n                            push:oracle 스스로 주기적으로 데이터를 블록체인에 업로드(시세)<br />\n                            장점:응답 빠름, 반복요청 없이 참조 가능<br />\n                            단점:필요없는 데이터도 계속 업로드(비용발생증가)\n                        </li>\n                        <li>\n                            pull:컨트랙트가 직접 요청을 보내고,그떄 오라클이 데이터를 응답<br />\n                            장점:불필요한 데이터 전송없다, 요청중심으로 유연한 구조<br />\n                            단점:오라클 응답 지연시 계약 실행도 지연, 2개 이상의 트랜잭션이 필요할수 있다(요청 다음 응답)\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>오라클 신뢰방식</li>\n                        <li>\n                            중앙화 오라클:하나의 데이터 제공자나 서버가 정보를 전달, 빠르고 간단하며 구현이 쉽다<br />\n                            단점:단일 실패지점,조작 가능성,거리를 둔 탈중앙 철학\n                        </li>\n                        <li>\n                            탈중앙화 오라클:여러 노드가 데이터 수집후,다수의 합의를 통해 결과 제공<br />\n                            합의알고리즘을 통한 신뢰도 확보, 조작 불가,검증 가능성높다<br />\n                            단점:구현 복잡,높은 비용\n                        </li>\n                    </ul>\n                    <p>\n                        oracle대표적 활용:가격 시세,날씨,경기 결과,무작위값,api연결<br />\n                        블록체인 외부에서 작동하는 특성상 비교적 신뢰할 수 없는 데이터에 의존하게되는데<br />\n                        오라클 자체가 취약하거나 잘못된정보를 주면 컨트랙트도 잘못된 결과를 내보낸다\n                        \n                        <h4>delay</h4>\n                        oracle이 외부 데이터를 가져오는 시간이 오래 소요될수 있다:네트워크 지연,블록체인 혼잡,오라클 노드 오프라인 등으로 \n                        오래된 데이터로 트랜잭션처리, 스왑 시점 가격차이, 시간제한 서비스에서 응답지연\n                        <h4>Avaliability기용성 문제</h4>\n                        오라클이 죽으면,컨트랙트는 데이터 제공이 없으므로 같이 죽는다:디파이 거래중단,보험서비스 작동불가,게임중 응답없음 상태\n                        해결방안:다중 오라클 사용으로 단일 실패에 의존하지 않게 집계하여 설계\n                        집계Aggregation:단순히 다중오라클 사용이 아닌 다중의 특성을 이용하여 평균값/합의알고리즘 이용으로 신뢰도 높이기(오라클노드5개중 1개가 잘못된 값을 줘도 중앙값을 취하면 안전)\n                        탈중앙화 오라클 네트워크:오픈 네트워크에서 노드들이 경제적 인센티브를 갖고 데이터 제공에 참여\n                    </p>\n                        블록체인 자체 에서 취약한 랜덤:컨트랙트는 결정적인 환경에서 실행되어 timestamp,blocknumber,keccak같은 방식으로 랜덤을<br />\n                        생성하면 블록생성자(채굴자 or validator)예측이 가능하여 조작이 가능하게된다.(공격자가 블록생성 시간이나 입력값을 조정하여 의도된 결과생성)<br />\n                        chainlink VRF는 오라클이 생성한 랜덤 값을 서명과 함께 전달하여, 컨트랙트가 그 값을 검증과 신뢰 가능<br />\n                        VRF사용시 chainlink노드가 무작위값을 생성하고,암호학적 서명된 증거와 컨트랙트에 전달 <br />\n                        컨트랙트가 vrf에 랜덤값을 요청 - chainlink노드가 무작위값+암호학적 증명을 생성 - fulfilRandomWords()로 무작위값을 컨트랙트에 전달 <br />\n                        - 컨트랙트는 값을 수신하고,자동으로 검증\n                </p>\n\n            </dd>\n        </dl>\n    )\n}\nexport default Day33;"],"names":["Day33","_jsxs","className","children","_jsx"],"sourceRoot":""}