{"version":3,"file":"static/js/638.763e4e96.chunk.js","mappings":"+IAEA,MAiFA,EAjFcA,KAEVC,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASF,SAAA,EACrBD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,YAAWF,SAAC,0DAC1BC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACxBD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,qgBAIHD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4DACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,uGAC0DD,EAAAA,EAAAA,KAAA,SAAM,+EACtBA,EAAAA,EAAAA,KAAA,SAAM,8OAInDA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4CACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,qTACgED,EAAAA,EAAAA,KAAA,SAAM,qcAC4BA,EAAAA,EAAAA,KAAA,SAAM,4EACnFA,EAAAA,EAAAA,KAAA,SAAM,8OAI9BA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,+DACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,qDAC0DD,EAAAA,EAAAA,KAAA,SAAM,+OAGnEE,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,qDAC0DD,EAAAA,EAAAA,KAAA,SAAM,kDACnBA,EAAAA,EAAAA,KAAA,SAAM,oPAItDA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,qGACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,6EACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,yDACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,2EACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4DACJD,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,iCAEND,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4EACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,mCACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,0JACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,+HACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4MAGND,EAAAA,EAAAA,KAAA,MAAAC,SAAI,qCACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,2KAA+CD,EAAAA,EAAAA,KAAA,SAAM,qSACzDA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4GAENC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,8BAC8BD,EAAAA,EAAAA,KAAA,SAAM,kDACSA,EAAAA,EAAAA,KAAA,SAAM,QAItDE,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,0EAC+CD,EAAAA,EAAAA,KAAA,SAAM,yBAIxDA,EAAAA,EAAAA,KAAA,KAAAC,SAAG,uGAGHD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAC,SAAG,sX","sources":["til/Day13.tsx"],"sourcesContent":["import React from 'react';\n\nconst Day13 = () => {\n  return (\n    <div>\n      <dl className=\"dayWrap\">\n        <dt className=\"daybutton\">25.2.19 day13 참조타입 Array, Object</dt>\n        <dd className=\"daycontent\">\n          <p>\n            데이터 타입은 원시 타입과 참조형 타입으로 나뉩니다. 참조 타입은 복잡한 데이터를 나타내며, 원시 타입처럼 값 자체가 아닌 메모리 주소를 참조(가리키는) 형태로 저장합니다. [값을 저장하지 않습니다]\n          </p>\n\n          <h3>Reference type(참조 타입 종류)</h3>\n          <p>\n            Object &#123; key: value, key: value &#125; 형태로 여러 개 저장 가능 <br />\n            Array &#91; i, 1, '2', 3 &#93; 형태로 여러 개 저장 <br />\n            function() &#123;&#125;: 특정 작업을 수행하는 코드 블록, 변수에 저장하거나 다른 함수에 결과물을 전달 가능\n          </p>\n\n          <h3>참조 타입 특징</h3>\n          <p>\n            값을 직접 저장하는 것이 아니라 값의 메모리 주소를 저장하는 형태로 여러 변수들이 하나의 메모리를 공유하게 됩니다. <br />\n            두 개의 다른 변수들이 같은 값의 참조 데이터를 공유하면 메모리를 공유하게 되고, 메모리 공유 변수 중 하나의 값을 재할당하면 다른 변수의 값도 의도치 않게 바뀔 수 있습니다. <br />\n            const 참조데이터1 = 참조데이터2 <br />\n            배열: 순서대로 나열하고 싶을 때 배열 사용, 순서를 보장합니다. index를 사용하는 큐 형태 기반\n          </p>\n\n          <h3>얕은 복사와 깊은 복사</h3>\n          <p>\n            const user1 = &#123; name: 'alice', age: 99, id: 1 &#125;, <br />\n            user2 = &#123; ...user1 &#125; 얕은 복사 상태: user1의 객체를 재할당하거나, 추가, 삭제를 하면 user2에도 영향을 줍니다.\n          </p>\n          <p>\n            const user1 = &#123; name: 'alice', age: 99, id: 1 &#125;, <br />\n            user2Deep = JSON.parse(JSON.stringify(user1)) <br />\n            깊은 복사 상태: 복사 원본과 독립적인 메모리를 새로 만들어 다른 쪽에 영향을 주지 않습니다.\n          </p>\n\n          <h3>배열 데이터 자주 사용되는 내장 함수</h3>\n          <ul>\n            <li>push(): 배열 마지막에 요소 추가</li>\n            <li>pop(): 마지막 요소 제거</li>\n            <li>unshift(): 배열 첫 번째 요소 추가</li>\n            <li>shift(): 첫 번째 요소 제거</li>\n            <li>\n              <h3>배열 순회</h3>\n            </li>\n            <li>for (const item of arr) &#123; item이 각각의 요소 &#125;</li>\n            <li>arr.forEach((item, index) &#123;&#125;)</li>\n            <li>arr.map(a, b, c): 현재 순회 중인 요소, 현재 인덱스, 호출한 배열 원본</li>\n            <li>arr.reduce((acc, num) 화살표 acc + num, 0): acc는 누적값, num은 현재 요소</li>\n            <li>arr.filter(function(boolean이나 함수 추가 가능)): 원하는 요소만 선택하여 새로운 배열을 반환</li>\n          </ul>\n\n          <h3>객체 데이터</h3>\n          <ul>\n            <li>객체 데이터 내부의 값에 접근하려면 .표기법을 사용합니다: obj.key value <br /> 또는 대괄호 표기법 obj[key]: &#39;&#39; 사용하면 객체 자체로 들어가고, 사용하지 않으면 변수에 저장된 키값으로 접근합니다.</li>\n            <li>Object.key(obj): 객체의 모든 키들만 배열로 반환</li>\n          </ul>\n          <p>\n            for (const key in user) &#123; <br />\n            console.log(`key: $key`, `value: $user key`); <br />\n            &#125;\n          </p>\n\n          <p>\n            결과: user.email = &#39;gerd@gmail.com&#39; 객체 추가 <br />\n            delete user.email;\n          </p>\n\n          <p>\n            객체 데이터 깊은 복사: obj2 = JSON.parse(JSON.stringify(obj))\n          </p>\n          <hr />\n          <p>\n            순서대로 나열하고 싶을 때 배열 사용, 순서를 보증합니다. index를 사용하는 큐 형태 기반. 자바스크립트는 데이터들마다 내장 함수를 지원합니다.\n          </p>\n        </dd>\n      </dl>\n    </div>\n  );\n};\n\nexport default Day13;\n"],"names":["Day13","_jsx","children","_jsxs","className"],"sourceRoot":""}