{"version":3,"file":"static/js/1771.ad6f42ec.chunk.js","mappings":"qKAEA,MAmDA,EAnDaA,KAELC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SAAC,mBAC1BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wIACJF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qIACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wGAERF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,4IAECC,EAAAA,EAAAA,KAAA,SAAM,8OAENA,EAAAA,EAAAA,KAAA,SAAM,yJAENA,EAAAA,EAAAA,KAAA,SAAM,sKAENA,EAAAA,EAAAA,KAAA,SAAM,+JAGVH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,cAECC,EAAAA,EAAAA,KAAA,SAAM,ybAENA,EAAAA,EAAAA,KAAA,SAAM,yIAENA,EAAAA,EAAAA,KAAA,SAAM,wFAENA,EAAAA,EAAAA,KAAA,SAAM,kEAGVH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,aAECC,EAAAA,EAAAA,KAAA,SAAM,iHAENA,EAAAA,EAAAA,KAAA,SAAM,wPAENA,EAAAA,EAAAA,KAAA,SAAM,wJAENA,EAAAA,EAAAA,KAAA,SAAM,2K","sources":["til/Day7.tsx"],"sourcesContent":["import React, { JSX } from \"react\";\nimport \"../css/dayform.css\"\nconst Day7 = (): JSX.Element => {\n    return (\n        <dl className=\"dayWrap\">\n            <dt className=\"daybutton\">25.2.11 day 7</dt>\n            <dd className=\"daycontent\">\n                <h4>git 프로젝트 버전관리 도구, 분산형 버전관리 시스템</h4>\n                <dl>\n                    <dt>필요한 이유</dt>\n                    <dd>파일이 변경되면 변경 이력과 변경 사항 확인 가능</dd>\n                    <dd>이전 버전으로 돌아갈 수 있다</dd>\n                    <dd>협업을 할 때 유용하다</dd>\n                    <dd>데이터 손실 시 저장소에서 백업 가능</dd>\n                </dl>\n                <p>\n                    git의 파일 관리를 위한 사용되는 공간들 [working dir - staging - repository].\n                    <br />\n                    - working directory (modified): 로컬상의 실제 위치, git은 파일을 추적하고는 있지만 저장소 반영은 안 되는 상태.\n                    <br />\n                    - staging area: commit 준비된 파일들 임시 저장 공간. `git add`로 이곳에 온다.\n                    <br />\n                    - repository: git이 관리하는 데이터베이스, `git commit`으로 저장되며 기록된다.\n                    <br />\n                    코드 작성 후 저장소에 올라가는 공식 명령어: `git add`, `git commit`, `git push`.\n                </p>\n                <p>\n                    git branch\n                    <br />\n                    같은 분기점에서 시작하여 서로 다른 코드를 작성해야 되는 협업에서 사용된다. 분기된 코드에서 또 분기가 가능하며 이때는 분기 기준이 되는 브랜치에서 시작하도록 주의.\n                    <br />\n                    `git checkout -b branchname`: 현재 코드에서 브랜치 생성 후 바로 이동.\n                    <br />\n                    `git checkout branchname`: `branchname`의 브랜치로 이동.\n                    <br />\n                    `git branch`: branch들의 이름 보기.\n                </p>\n                <p>\n                    git merge\n                    <br />\n                    branch된 코드를 하나의 코드로 병합할 때 사용.\n                    <br />\n                    merge 시도할 때 실패하는 이유는 branch 협업 시 같은 곳에 수정 사항이 발생, 일치하지 않아서 발생한다.\n                    <br />\n                    해결 방안: `git fetch --all`: 모든 원격 저장소 내용을 로컬에 최신화.\n                    <br />\n                    `git pull origin main(branch)`: 원격 저장소(origin)의 내용을 브랜치 코드로 가져오기.\n                </p>\n            </dd>\n        </dl>\n    );\n};\n\nexport default Day7;\n"],"names":["Day7","_jsxs","className","children","_jsx"],"sourceRoot":""}