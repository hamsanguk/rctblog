{"version":3,"file":"static/js/268.cb282132.chunk.js","mappings":"sJAEA,MA2FA,EA3FYA,KAEJC,EAAAA,EAAAA,KAAA,OAAAC,UACIC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASF,SAAA,EACnBD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,YAAWF,SAAC,gBAC1BC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,2BACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,oDACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,kBACeD,EAAAA,EAAAA,KAAA,SAAK,qFAGvBA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,oDACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,mIACgDD,EAAAA,EAAAA,KAAA,SAAK,2HAClBA,EAAAA,EAAAA,KAAA,SAAK,6FACLA,EAAAA,EAAAA,KAAA,SAAK,oGAEnCE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,yBACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,2DACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,4BAGhBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,0BACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,qOAGJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,gLAIRD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,qDACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,oOACuDD,EAAAA,EAAAA,KAAA,SAAK,qGAC3BA,EAAAA,EAAAA,KAAA,SAAK,iIAGzCA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,8CACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,0FAC0CD,EAAAA,EAAAA,KAAA,SAAK,oGACLA,EAAAA,EAAAA,KAAA,SAAK,6DACdA,EAAAA,EAAAA,KAAA,aAEpCA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,gBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,sHACkDD,EAAAA,EAAAA,KAAA,SAAK,4HACnBA,EAAAA,EAAAA,KAAA,SAAK,kIAG5CE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,eAAe,kKAC+ED,EAAAA,EAAAA,KAAA,SAAK,4JAC7DA,EAAAA,EAAAA,KAAA,SAAK,wMACDA,EAAAA,EAAAA,KAAA,SAAK,iGAGvDA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,mIAGJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,8NACqDD,EAAAA,EAAAA,KAAA,SAAK,6RAEMA,EAAAA,EAAAA,KAAA,SAAK,8IACDA,EAAAA,EAAAA,KAAA,SAAK,gDACtDA,EAAAA,EAAAA,KAAA,SAAK,qFACEA,EAAAA,EAAAA,KAAA,SAAK,0EACNA,EAAAA,EAAAA,KAAA,SAAK,8GACCA,EAAAA,EAAAA,KAAA,SAAK,qCACvBA,EAAAA,EAAAA,KAAA,SAAK,0KAGtBE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,6RACkED,EAAAA,EAAAA,KAAA,SAAK,uFACrDA,EAAAA,EAAAA,KAAA,SAAK,kMACgCA,EAAAA,EAAAA,KAAA,aAE3DE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,qWACmFD,EAAAA,EAAAA,KAAA,SAAK,0LACnDA,EAAAA,EAAAA,KAAA,SAAK,8N","sources":["til/Day15.tsx"],"sourcesContent":["import React,{JSX} from \"react\"; //수정하기\nimport \"../css/dayform.css\"\nconst Day13=():JSX.Element=>{\n    return(\n        <div>\n            <dl className=\"dayWrap\">\n                <dt className=\"daybutton\">3/24 day35</dt>\n                <dd className=\"daycontent\">\n                    <h2>solidity 사용</h2>\n                    <h3>solidity 컴파일러 설치</h3>\n                    <p>\n                        npm i -g solc <br/>\n                        or hardhat과 함꼐 사용하려면: npm i -D hardhat\n                    </p>\n                    <h3>solidity 코드 실행환경</h3>\n                    <p>\n                        Remix IDE: 브라우저 기반 solidity IDE, 컴파일,디버깅,배포 가능 <br/>\n                        Hardhat: 로컬 개발환경, 테스트넷 배포, 테스트 가능 <br/>\n                        Truffle: solidity 개발환경, 테스트, 배포 가능<br/>\n                        배포를 위해서는 hardhat과 truffle을 사용한다\n                            <ul>\n                                <li>npx hardhat compile</li>\n                                <li>npx hardhat run scripts deploy.js --network lacalhost</li>\n                                <li>npx hardhat test</li>\n                            </ul>\n                    </p>\n                    <h3>solidity특징</h3>\n                    <ul>\n                        <li>\n                            스마트컨트랙트 기반:블록체인에서 자동실행되는 계약작성,중계자 없는 defi,nft,dao구현가능\n                        </li>\n                        <li>\n                            EVM에서 실행가능: 이더리움뿐 아니라 poligon,avalanche,bnbchain등에서도 활용가능\n                        </li>\n                    </ul>\n                    <h3>solidity IDE(integrated development Enviroment)</h3>\n                    <p>\n                        vscode는 코드 하이라이팅, 기본적인 컴파일을 지원하지만, 배포, 테스트, 디버깅을 위해서는 <br/>\n                        hardhat,truffle과 같은 개발프레임워크가 필요 <br/>\n                        remix: 브라우저 기반 solidity IDE, 컴파일,디버깅,배포 가능\n                    </p>\n                    <h3>pragma solidity 버전범위</h3>\n                    <p>\n                        pragam solidity [&gt=0.8.0] :특정버전 이상을 지정 <br/>\n                        pragma solidity [^0.8.0] :최신버전 안정화 버전사용  <br/>\n                        pragma solidity [0.8.0] : 고정된 버전<br/>\n                    </p>\n                    <h3>Value Type</h3>\n                    <p>\n                        solidiy의 데이터타잎은 value type과 reference type으로 나뉜다 <br/>\n                        value type: 데이터를 복사하여 저장, 불변성을 가진다 <br/>\n                        reference type: 데이터를 참조하여 저장, 가변성을 가진다\n                    </p>\n                    <ul>\n                        <li><h4>value type</h4>\n                            정수형: 변수가 직접 값을 저장, uint8,uint16,uint32,uint64,uint128,uint256,int8,int16,int32,int64,int128,int256<br/>\n                            정수형은 부호있는 int (음,양수)와 부호없는 uint (양수)로 나뉜다 <br/>\n                            연산할때 uint와 int를 섞어서 사용하면 오버플로우,언더플로우 (컴파일오류)발생<br/>\n                            0으로 나누는 연산은 require로 예외처리\n                        </li>\n                        <li>\n                            bool: true,false값을 가지는 불리언 타입, 초기 기본 값은 false\n                        </li>\n                        <li>\n                            address: 이더리움 주소를 저장하는 변수, 주소를 저장하고 이더를 송금하는 함수를 가진다 <br/>\n                            EOA (externally owned account) 및 스마트 컨트랙트 계정 모두 adress타입으로 식별\n                            address public userAdress = 0x1234...;  특정 계정식별 용도의 기본적인 adress <br/>\n                            address payable public owner = 0x1234...; 송금 기능 payable 속성이 추가된 주소타입<br/>\n                            adress type 주요 메서드 <br/>\n                            transfer: 이더 송금, 실패시 예외처리 <br/>\n                            send: 이더 송금, 실패시 false반환 <br/>\n                            call: 유연하지만 보안에 취약, 실패시 false반환<br/>\n                            balance: 잔액확인<br/>\n                            일반주소에서 payable주소로의 변환은 가능하지만 그 반대는 불가능\n                        </li>\n                        <li>\n                            bytes: 바이트 배열을 저장하는 변수,문자열보다 낮은 가스 비용을 가지며, 특정 데이터 조작을 더 효율적으로 수행 <br/>\n                            가변 크기의 바이트 배열을 저장 <br/>\n                            bytes 고정 크기의 바이트 배열을 저장하는 변수는 bytes1~bytes32까지의 크기를 가진다<br/>\n                        </li>\n                        <li>\n                            enum: 열거형 변수, 상태를 정의하고 상태에 따라 분기처리를 할때 사용,스마트컨트랙트에서 상태(state)나 옵션을 명확하게 표현하는데 사용된다 <br/>\n                            저장은 값을 숫자로 저장하지만 가독성을 위하여 명명된 요소 사용가능<br/>\n                            enum State  &#123;Pending, Active,Inactive &#125; 이렇게 명시되어있으면 pending=0,active=1,inactive=2로 값자체는 숫자로 저장된다\n                        </li>\n                    </ul>\n                </dd>\n            </dl>\n        </div>\n        \n    )\n}\n{/* git fetch, git pull*/}\nexport default Day13;"],"names":["Day13","_jsx","children","_jsxs","className"],"sourceRoot":""}