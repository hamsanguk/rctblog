{"version":3,"file":"static/js/255.967e4486.chunk.js","mappings":"sJAGA,MA6DA,EA7DcA,KAENC,EAAAA,EAAAA,KAAA,OAAAC,UACIC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,UAASF,SAAA,EACnBD,EAAAA,EAAAA,KAAA,MAAIG,UAAU,YAAWF,SAAC,+BAC1BC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYF,SAAA,EACtBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,sBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,wRACyDD,EAAAA,EAAAA,KAAA,SAAK,8GAGjEA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,8BACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,yHACiCD,EAAAA,EAAAA,KAAA,SAAM,sFACXA,EAAAA,EAAAA,KAAA,SAAM,kJAGrCE,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACID,EAAAA,EAAAA,KAAA,MAAAC,UAAID,EAAAA,EAAAA,KAAA,MAAAC,SAAI,mFACRD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,oJAGJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,uKAIRC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,uFACwBD,EAAAA,EAAAA,KAAA,SAAM,gIACKA,EAAAA,EAAAA,KAAA,SAAM,gGAG5CA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,eACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,gQAEyBD,EAAAA,EAAAA,KAAA,SAAM,4MACUA,EAAAA,EAAAA,KAAA,SAAM,2NAIlDA,EAAAA,EAAAA,KAAA,MAAAC,SAAI,kDACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,uSAC8DD,EAAAA,EAAAA,KAAA,SAAM,ySAIvEA,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4O","sources":["til/Day16.tsx"],"sourcesContent":["import React,{JSX} from \"react\";\nimport \"../css/dayform.css\"\n\nconst Day16 = ():JSX.Element=>{\n    return(\n        <div>\n            <dl className=\"dayWrap\">\n                <dt className=\"daybutton\">day38solidity문법</dt>\n                <dd className=\"daycontent\">\n                    <h3>global Variables</h3>\n                    <p>\n                        전역변수는 스마트컨트랙트 실행시 자동제공되는 읽기전용테이터, (블록,트랜잭션,메세지에 대한정보 제공)<br/>\n                        msg.sender .value .data | tx.origin |block.timestamp .number .prevrandao .gaslimit .coinbase .gasleft()\n                    </p>\n                    <h3>전역함수</h3>\n                    <p>\n                        gasleft():현재 트랜잭션에서 남아있는 가스양 확인 <br />\n                        kecckak256():입력된 데이터를 해시처리 <br />\n                        blockhash(uint):특정블록번호에 대한 해시값을 반환(최근 256개 block)\n                    </p>\n                    <ul>\n                        <li><h3>전역변수와 함수 사용시 주의</h3></li>\n                        <li>\n                            tx.origin은 재진입공격에 최약:인증에 사용x/ msg.sender를 권장 사용\n                        </li>\n                        <li>\n                            block.timestamp 채굴자에 의해 소폭변경 +-15초 시간기반 게임로직에 유의\n                        </li>\n                    </ul>\n                    <p>\n                        public:상속받은 계약에서 접근 가능 <br />\n                        internal:상속받은 계약어서 접근가능(외부접근 불가)  <br />\n                        private:상속받은 계약에서도 접근 불가\n                    </p>\n                    <h3>Interface</h3>\n                    <p>\n                        외부계약이 따를 수 있는 표준함수 시그니처만 정의\n                        변수나 구현로직 포함불가,함수의 선언만 포함<br />\n                        기본로직이나 공통기능을 정의하고, 이를 상속받은 계약에서 구현하도록 설계<br />\n                        직접 배포 불가,최소 하나이상의 virtual 함수가 존재\n                        정의:interface IAnimal&#123;function makeSound() external view returns(string memory)&#125;\n                    </p>\n                    <h3>추상계약(Abstract contracts)</h3>\n                    <p>\n                        하나이상의 구현않되 함수를 가진 계약, 기본로직이나 공통 기능을 정의하고, 상속받은 계약에서 구현하도록 설계 <br />\n                        직접배포 불가,하나이상의 virtual 함수 필요,상속받은 계약에서 반드시 override해야된다\n                        library LibraryName&#123; function functionName(parameters) public pure returns (type)&#123;&#125; &#125;\n                    </p>\n                    <p>\n                        using for구문은 라이브러리 함수를 특정 데이터에 연결시켜, 메서드 형식으로 사용을 돕는다.\n                        \n                    </p>\n                    \n                </dd>\n            </dl>\n        </div>\n    )\n}\n\n// msg.sender vs tx.origin\n// EOA(트랜잭션 생성): 컨트랙트 1 호출 => 컨트랙트 1: 함수 실행시 컨트래트 2 호출 => 컨트랙트 2: !!여기서 msg.sender or tx.origin은 어떻게 될까?!!\n// function getRandom() external view returns (uint256) {\n//     return uint256(keccak256(abi.encodePacked(block.prevrandao, msg.sender, block.timestamp)));\n// }\nexport default  Day16;"],"names":["Day16","_jsx","children","_jsxs","className"],"sourceRoot":""}